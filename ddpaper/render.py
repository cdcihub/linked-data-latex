from __future__ import print_function


import os
import re
import jinja2
import numpy as np
from jinja2.utils import concat

import logging

logger = logging.getLogger('ddpaper.render')

from ddpaper.filters import setup_custom_filters

def get_latex_jinja_env():
    env=jinja2.Environment(
            block_start_string = r'\BLOCK{',
            block_end_string = '}',
            variable_start_string = r'\VAR{',
            variable_end_string = '}',
            comment_start_string = r'\#{',
            comment_end_string = '}',
            line_statement_prefix = r'%%\LINE',
            line_comment_prefix = '%#',
            trim_blocks = True,
            autoescape = False,
            loader = jinja2.FileSystemLoader(os.path.abspath('.')),
        undefined=jinja2.StrictUndefined,
    )
    setup_custom_filters(env)
    return  env

def extract_referenced_keys(template_string):
    reduced=[]
    for k in re.findall(r"\\VAR{(.*?)}", template_string):
        if not k in reduced:
            print("found",k)
            reduced.append(k)
    return reduced

def extract_template_data(template_string):
    keys = extract_referenced_keys(template_string)

    re_eq = re.compile("(.*?)==(.*)")

    template_data = []

    for key in keys:
        r = re_eq.match(key)
        if r:
            k,v = r.groups()
        else:
            k = key
            v = None

        template_data.append((key, k, v))

    return template_data


def compute_value(latex_jinja_env, key, data):
    rtemplate = latex_jinja_env.from_string("\VAR{"+key+"}")

    try:
        d_value=np.unicode(rtemplate.render(data)) #.encode('utf8')
    except Exception as e:
        print("unable to render",key,e)

        d_value="XXX"

    return d_value


def render_definitions(latex_jinja_env,template_string,data):
    header = """
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% generated by template.py, please do not edit directly
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% boilerplate

\def\\addVAR#1#2{\expandafter\gdef\csname my@data@\detokenize{#1}\endcsname{#2}}
\def\VAR#1{%
  \ifcsname my@data@\detokenize{#1}\endcsname
    \csname my@data@\detokenize{#1}\expandafter\endcsname
  \else
    \expandafter\ERROR
  \\fi
}
\def\DATA#2{%
  \ifcsname my@data@\detokenize{#2}\endcsname
    \csname my@data@\detokenize{#2}\expandafter\endcsname
  \else
    \expandafter\ERROR
  \\fi
}

% extracted definitions

"""
    template_data = extract_template_data(template_string)

    output=header
    for l_key, key, value in template_data:
        d_value = compute_value(latex_jinja_env, key, data)

        logger.debug("key: %s, value: %s; long key: %s; data value %s"%(key, value, l_key, d_value))

        output+=r"\addVAR{"+l_key+"}{"+d_value+"}\n"

    return output


def render_draft(latex_jinja_env, template_string, data, write_header=True):
    re_var = re.compile(r"\\VAR{(.*?)==(.*?)}")

    draft_vars = re_var.findall(template_string)
    for k, v in draft_vars:
        logger.debug("draft var: %s %s",k,v)

    ready_template = re_var.sub(r"\\VAR{\1}", template_string)

    logger.debug("processed template:\n %s",ready_template)

    template = latex_jinja_env.from_string(ready_template)

    if write_header:
        header = """
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% generated by template.py, please do not edit directly
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
"""
    else:
        header=""

    raw_render=concat(
        template.root_render_func(template.new_context(data,shared=False))
    )

    rendering=np.unicode(header+raw_render) 

    return rendering

def render_update(latex_jinja_env,template_string,data):
    template_data = extract_template_data(template_string)

    updated_template = template_string

    for l_key, key, value in template_data:
        d_value = compute_value(latex_jinja_env, key, data)
        
        logger.debug("key: %s, value: %s; long key: %s; data value %s"%(key, value, l_key, d_value))

        updated_template = updated_template.replace(
                r"\VAR{%s==%s}"%(key,value),
                r"\VAR{%s == %s}"%(key.strip(),d_value.strip()),
            )

    return updated_template

def render_validate(latex_jinja_env,template_string,data):
    template_data = extract_template_data(template_string)

    for l_key, key, value in template_data:
        d_value = compute_value(latex_jinja_env, key, data)
        logger.info("key: %s value %s: new value: %s"%(key, value, d_value))

    return ""
